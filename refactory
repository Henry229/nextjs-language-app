리팩토링 계획을 마크다운 형식으로 재구성하고 진행상황을 체크할 수 있는 체크박스를 각 태스크에 추가했습니다.

# Next.js 15 리팩토링 계획

## 1. 프로젝트 구조 트리

```
.
├── app/
│   ├── api/
│   │   ├── chat/
│   │   │   └── route.ts
│   │   └── tts/
│   │       └── route.ts
│   ├── learn/
│   │   ├── page.tsx               # 학습 메인 페이지
│   │   ├── stage1/                # 1단계: CSV 문장 입력 및 영작 연습
│   │   │   └── page.tsx
│   │   ├── stage2/                # 2단계: 플래시 카드 학습
│   │   │   └── page.tsx
│   │   ├── stage3/                # 3단계: 문맥 이해를 위한 podcast
│   │   │   └── page.tsx
│   │   └── stage4/                # 4단계: 음성인식 말하기 연습
│   │       └── page.tsx
│   ├── globals.css
│   ├── layout.tsx
│   └── page.tsx                   # 랜딩 페이지
├── components/
│   ├── ui/                        # 재사용 가능한 UI 컴포넌트
│   │   ├── Button.tsx
│   │   ├── TextInput.tsx
│   │   └── ...
│   ├── layout/                    # 레이아웃 관련 컴포넌트
│   │   ├── Header.tsx
│   │   └── Footer.tsx
│   ├── learn/                     # 학습 관련 컴포넌트
│   │   ├── Card.tsx
│   │   ├── CardDeck.tsx
│   │   ├── CsvImport.tsx
│   │   ├── Stage1Exercise.tsx
│   │   ├── Stage2Flashcards.tsx
│   │   ├── Stage3Podcast.tsx
│   │   └── Stage4Speaking.tsx
│   └── common/                    # 공통 컴포넌트
│       ├── ErrorMessage.tsx
│       └── ...
├── lib/
│   ├── hooks/                     # 커스텀 훅
│   │   ├── useSpeechRecognition.ts
│   │   ├── useTextToSpeech.ts
│   │   └── ...
│   ├── utils/                     # 유틸리티 함수
│   │   ├── csv-parser.ts
│   │   ├── text-similarity.ts
│   │   └── ...
│   └── services/                  # API 서비스
│       ├── tts-service.ts
│       ├── chat-service.ts
│       └── ...
└── types/                         # 타입 정의
    ├── card.ts
    ├── stages.ts
    ├── message.ts
    └── speech-recognition.ts
```

## 2. 코드 파일 목록

### 타입 정의 파일
- [x] **types/stages.ts**: 학습 단계 관련 타입 및 상수
- [x] **types/card.ts**: 카드 데이터 관련 타입 및 상수
- [x] **types/message.ts**: 채팅 메시지 관련 타입 및 상수
- [x] **types/speech-recognition.ts**: 음성 인식 관련 타입 정의

### 유틸리티 및 훅
- [ ] **lib/utils/csv-parser.ts**: CSV 데이터 파싱 기능
- [ ] **lib/utils/text-similarity.ts**: 텍스트 유사도 비교 기능
- [ ] **lib/hooks/useSpeechRecognition.ts**: 음성 인식 커스텀 훅
- [ ] **lib/hooks/useTextToSpeech.ts**: TTS 기능 커스텀 훅
- [ ] **lib/services/tts-service.ts**: TTS API 호출 서비스
- [ ] **lib/services/chat-service.ts**: Chat API 호출 서비스

### 컴포넌트
- [ ] **components/learn/CsvImport.tsx**: CSV 입력 컴포넌트
- [ ] **components/learn/Card.tsx**: 카드 단일 컴포넌트
- [ ] **components/learn/CardDeck.tsx**: 카드 목록 및 네비게이션 컴포넌트
- [ ] **components/learn/Stage1Exercise.tsx**: 1단계 영작 연습 컴포넌트
- [ ] **components/learn/Stage2Flashcards.tsx**: 2단계 플래시 카드 컴포넌트
- [ ] **components/learn/Stage3Podcast.tsx**: 3단계 Podcast 컴포넌트
- [ ] **components/learn/Stage4Speaking.tsx**: 4단계 말하기 연습 컴포넌트
- [ ] **components/ui/Button.tsx**: 버튼 컴포넌트
- [ ] **components/ui/TextInput.tsx**: 텍스트 입력 컴포넌트
- [ ] **components/common/ErrorMessage.tsx**: 오류 메시지 컴포넌트

### 페이지
- [x] **app/page.tsx**: 랜딩 페이지
- [x] **app/learn/page.tsx**: 학습 메인 페이지
- [x] **app/learn/stage1/page.tsx**: 1단계 영작 연습 페이지
- [x] **app/learn/stage2/page.tsx**: 2단계 플래시 카드 페이지
- [x] **app/learn/stage3/page.tsx**: 3단계 Podcast 페이지
- [x] **app/learn/stage4/page.tsx**: 4단계 말하기 연습 페이지

## 3. 작업 계획서

### 1단계: 기본 설정 및 타입 정의 (1-2일)
- [x] 디렉토리 구조 설정
  - [x] `components/` 디렉토리 및 하위 디렉토리 생성
  - [x] `lib/` 디렉토리 및 하위 디렉토리 생성
  - [x] `types/` 디렉토리 생성
  - [x] `app/learn/` 디렉토리 및 하위 경로 설정
- [x] Next.js 15 App Router 구조에 맞게 기본 레이아웃 구성
- [x] 타입 및 상수 정의 파일 생성
  - [x] `types/stages.ts` 작성
  - [x] `types/card.ts` 작성
  - [x] `types/message.ts` 작성
  - [x] `types/speech-recognition.ts` 작성

### 2단계: 유틸리티 및 훅 추출 (2-3일)
- [ ] 기존 page.tsx에서 공통 기능 추출
  - [ ] CSV 파싱 기능을 유틸리티로 분리
  - [ ] 음성 인식 및 TTS 기능을 커스텀 훅으로 분리
  - [ ] API 호출 로직을 서비스로 분리
- [ ] 타입 정의 적용 및 테스트
  - [ ] `lib/utils/csv-parser.ts` 구현
  - [ ] `lib/utils/text-similarity.ts` 구현
  - [ ] `lib/hooks/useSpeechRecognition.ts` 구현
  - [ ] `lib/hooks/useTextToSpeech.ts` 구현
  - [ ] `lib/services/tts-service.ts` 구현
  - [ ] `lib/services/chat-service.ts` 구현

### 3단계: 컴포넌트 분리 및 기본 UI 구현 (3-4일)
- [ ] 기존 page.tsx에서 컴포넌트 분리
  - [ ] 각 학습 단계별 컴포넌트 분리
  - [ ] UI 컴포넌트 구현
- [ ] 기본 레이아웃 및 공통 UI 구현
  - [ ] `components/ui/Button.tsx` 구현
  - [ ] `components/ui/TextInput.tsx` 구현
  - [ ] `components/common/ErrorMessage.tsx` 구현
  - [ ] `components/layout/Header.tsx` 구현
  - [ ] `components/layout/Footer.tsx` 구현
  - [ ] `components/learn/CsvImport.tsx` 구현
  - [ ] `components/learn/Card.tsx` 구현
  - [ ] `components/learn/CardDeck.tsx` 구현
  - [ ] `components/learn/Stage1Exercise.tsx` 구현
  - [ ] `components/learn/Stage2Flashcards.tsx` 구현
  - [ ] `components/learn/Stage3Podcast.tsx` 구현
  - [ ] `components/learn/Stage4Speaking.tsx` 구현

### 4단계: 페이지 구현 및 상태 관리 (3-4일)
- [ ] App Router 구조에 맞는 페이지 구현
  - [x] `app/page.tsx` (랜딩 페이지) 구현
  - [x] `app/learn/page.tsx` (학습 메인 페이지) 구현
  - [x] `app/learn/stage1/page.tsx` (1단계) 구현
  - [x] `app/learn/stage2/page.tsx` (2단계) 구현
  - [x] `app/learn/stage3/page.tsx` (3단계) 구현
  - [x] `app/learn/stage4/page.tsx` (4단계) 구현
- [ ] 상태 관리 통합
  - [ ] localStorage를 활용한 기본 상태 관리 구현
  - [ ] (선택) Context API를 활용한 상태 관리 개선

### 5단계: 통합 테스트 및 마무리 (2-3일)
- [ ] 전체 학습 플로우 테스트
  - [ ] 각 학습 단계 전환 테스트
  - [ ] API 연동 테스트
- [ ] 버그 수정 및 최적화
  - [ ] 성능 최적화 및 코드 정리
  - [ ] 오류 처리 개선
- [ ] 최종 확인 및 배포
  - [ ] 전체 기능 확인
  - [ ] 코드 품질 검토
  - [ ] 배포 준비

## 고려사항

### 1. 서버 컴포넌트와 클라이언트 컴포넌트 구분
- [ ] 대부분의 학습 기능은 클라이언트 컴포넌트로 구현
- [ ] 가능한 부분은 서버 컴포넌트로 전환하여 성능 개선

### 2. 상태 관리
- [ ] 초기에는 localStorage를 활용하지만, 나중에 상태 관리 라이브러리 도입 고려
- [ ] 사용자 학습 진행 상태를 효율적으로 관리할 방법 고려

### 3. API 키 및 보안
- [ ] 환경 변수를 통한 API 키 관리
- [ ] 서버 컴포넌트와 API 라우트를 활용한 보안 강화

### 4. 접근성 및 반응형 디자인
- [ ] 다양한 기기에서 사용 가능한 반응형 디자인 구현
- [ ] 웹 접근성 고려한 UI/UX 설계

이 계획을 바탕으로 체계적으로 리팩토링을 진행하면, 현재 monolithic한 구조에서 모듈화된 구조로 전환하여 유지보수성과 확장성을 크게 향상시킬 수 있습니다. 